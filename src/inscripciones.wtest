import inscripciones.*

describe "inscripciones" {

	const epl = new MateriaEsperaElitista(cupo=1)
	const mate1 = new Materia()
	const obj1 = new Materia()
	const obj2 = new Materia(requisitos=#{obj1, mate1})
	const obj3 = new Materia(requisitos=#{mate1, obj2})
	const tip = new MateriaEsperaPorAvance( cupo=1 )
	const bd = new Materia(cupo=1)
	const quimica = new Materia()
	const biologia1 = new Materia()
	const biologia2 = new Materia()
	const anatomia = new Materia()
	const latin = new Materia()
	const romano = new Materia()
	const historia = new Materia()
	const penal1 = new Materia()
	const penal2 = new Materia()
	const programacion = new Carrera(materias = #{ epl, mate1, obj1, obj2, obj3, tip, bd })
	const medicina = new Carrera(materias = #{ quimica, biologia1, biologia2, anatomia })
	const derecho = new Carrera(materias = #{ latin, romano, historia, penal1, penal2 })
	const roque = new Estudiante(carreras = #{ programacion, medicina }, 
								 cursadasAprobadas = #{ new Cursada(materia=mate1, nota=7), 
								 						new Cursada(materia=obj1, nota=10)})
								 
	const maria = new Estudiante(carreras=#{programacion})
	const andrea = new Estudiante(carreras=#{programacion})
	
	fixture {
		roque.inscribir(epl)
		andrea.aprobar(obj1, 10)
	}

	test "aprobar" {
		roque.aprobar(epl, 6)
		assert.that(roque.aprobada(epl))
		assert.that(roque.aprobada(obj1))
		assert.that(roque.aprobada(mate1))
	}
	
	test "cantidad de materias aprobadas" {
		assert.equals(2, roque.cantidadMateriasAprobadas())
	}
	
	test "promedio" {
		assert.equals(8.50, roque.promedio())
	}
	
	test "materias de sus carreras" {
		assert.equals(#{ epl, mate1, obj1, obj2, obj3, tip, bd ,quimica, biologia1, biologia2, anatomia}, roque.todasLasMaterias())
	}
	
	test "puede inscribirse" {
		
		assert.that(roque.puedeInscribirse(obj2))
		assert.notThat(roque.puedeInscribirse(historia)) // no es de la carrera
		assert.notThat(roque.puedeInscribirse(obj1)) // ya la aprobo
		assert.notThat(roque.puedeInscribirse(obj3)) // no cumple requisistos
		assert.notThat(roque.puedeInscribirse(epl)) // ya inscripto 		
		
		
	}
	
	test "aprobar a una materia ya aprobada" {
		assert.throwsException({roque.aprobar(mate1, 10)})
	}
	
	test "inscribir" {
		assert.throwsException({roque.inscribir(historia)}) // no es de la carrera
		roque.inscribir(bd)
		assert.that(roque.inscripto(bd))
		maria.inscribir(bd)
		assert.that(maria.inscripto(bd))
		
		assert.equals([roque] , bd.confirmados())
		assert.equals([maria] , bd.espera())
		
	}

	test "desinscribir en espera" {
		roque.inscribir(bd)
		maria.inscribir(bd)
		maria.desinscribir(bd)
		
		assert.equals(0, bd.cupo())
		assert.equals([roque] , bd.confirmados())
		assert.that(bd.espera().isEmpty())
		assert.notThat(maria.inscripto(bd))
	}

	test "desinscribir confirmado estrategia cola" {
		roque.inscribir(bd)
		maria.inscribir(bd)
		andrea.inscribir(bd)
		roque.desinscribir(bd)
		
		assert.equals(0, bd.cupo())
		assert.equals([maria] , bd.confirmados())
		assert.equals([andrea], bd.espera())
		assert.notThat(roque.inscripto(bd))
		assert.that(maria.inscripto(bd))
		assert.that(andrea.inscripto(bd))
		
		maria.desinscribir(bd)
		assert.equals(0, bd.cupo())
		assert.equals([andrea], bd.confirmados())
		assert.that(bd.espera().isEmpty())
		assert.notThat(roque.inscripto(bd))
		assert.notThat(maria.inscripto(bd))
		assert.that(andrea.inscripto(bd))
		
		andrea.desinscribir(bd)
		assert.equals(1, bd.cupo())
		assert.that(bd.confirmados().isEmpty())
		assert.that(bd.espera().isEmpty())
		assert.notThat(roque.inscripto(bd))
		assert.notThat(maria.inscripto(bd))
		assert.notThat(andrea.inscripto(bd))
		 
	}
	
	test "desinscribir confirmado estreategia avance" {
		andrea.inscribir(tip)
		maria.inscribir(tip)
		roque.inscribir(tip)
		
		andrea.desinscribir(tip)
		
		assert.equals(0, tip.cupo())
		assert.equals([roque] , tip.confirmados())
		assert.equals([maria], tip.espera())
		assert.notThat(andrea.inscripto(tip))
		assert.that(maria.inscripto(tip))
		assert.that(roque.inscripto(tip))
		
		roque.desinscribir(tip)
		assert.equals(0, tip.cupo())
		assert.equals([maria], tip.confirmados())
		assert.that(tip.espera().isEmpty())
		assert.notThat(roque.inscripto(tip))
		assert.that(maria.inscripto(tip))
		assert.notThat(andrea.inscripto(tip))
		
		maria.desinscribir(tip)
		assert.equals(1, tip.cupo())
		assert.that(tip.confirmados().isEmpty())
		assert.that(tip.espera().isEmpty())
		assert.notThat(roque.inscripto(tip))
		assert.notThat(maria.inscripto(tip))
		assert.notThat(andrea.inscripto(tip))
		 
	}
	
	test "desinscribir confirmado estreategia elitista" {
		maria.inscribir(epl)
		andrea.inscribir(epl)
		
		roque.desinscribir(epl)
		
		assert.equals(0, epl.cupo())
		assert.equals([andrea] , epl.confirmados())
		assert.equals([maria], epl.espera())
		assert.that(andrea.inscripto(epl))
		assert.that(maria.inscripto(epl))
		assert.notThat(roque.inscripto(epl))
		
		andrea.desinscribir(epl)
		assert.equals(0, epl.cupo())
		assert.equals([maria], epl.confirmados())
		assert.that(epl.espera().isEmpty())
		assert.notThat(roque.inscripto(epl))
		assert.that(maria.inscripto(epl))
		assert.notThat(andrea.inscripto(epl))
		
		maria.desinscribir(epl)
		assert.equals(1, epl.cupo())
		assert.that(epl.confirmados().isEmpty())
		assert.that(epl.espera().isEmpty())
		assert.notThat(roque.inscripto(epl))
		assert.notThat(maria.inscripto(epl))
		assert.notThat(andrea.inscripto(epl))
		 
	}
	

}

